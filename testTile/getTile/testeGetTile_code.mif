DEPTH = 4096;
WIDTH = 32;
ADDRESS_RADIX = HEX;
DATA_RADIX = HEX;
CONTENT
BEGIN

00000000 : 24020030;  % 8: 	li $v0,48	#syscall para limpar a tela %
00000001 : 240400ff;  % 9: 	li $a0,0xFF  #fundo branco %
00000002 : 0000000c;  % 10: 	syscall %
00000003 : 24100003;  % 14: 	li $s0, 3 #numero de arquivos %
00000004 : 24110000;  % 15: 	li $s1, 0 #contador %
00000005 : 3c011001;  % 17: 	li $s2, 0x10010000 #.data %
00000006 : 34320000;  % 17:  %
00000007 : 12110008;  % 20: 		beq $s0, $s1, fimLoad %
00000008 : 8e530000;  % 21: 		lw $s3, 0($s2) %
00000009 : 00132021;  % 22: 		move $a0, $s3 #endereco para ser escrito na sram %
0000000a : 0c100114;  % 23: 		jal UART_READ %
0000000b : 02624020;  % 24: 		add $t0, $s3, $v0 #endereco anterior mais o numero de bytes do arquivo anterior %
0000000c : 22520004;  % 25: 		add $s2, $s2, 4 #aponta para a proxima label no .data %
0000000d : ae480000;  % 26: 		sw $t0, 0($s2)	#altera essa label para o proximo endereco vago %
0000000e : 22310001;  % 28: 		addi $s1, $s1, 1 %
0000000f : 08100007;  % 29: 		j loadLoop %
00000010 : 00002820;  % 34: 	add $a1, $zero, $zero %
00000011 : 2405003c;  % 35: 	li $a1, 60 %
00000012 : 00052c00;  % 36: 	sll $a1, $a1, 16 %
00000013 : 20a50044;  % 37: 	addi $a1, $a1, 68 %
00000014 : 0c10007b;  % 38: 	jal getTile %
00000015 : 3c011001;  % 40: 	la $a0, BG_1 %
00000016 : 34240000;  % 40:  %
00000017 : 8c840000;  % 41: 	lw $a0, 0($a0) %
00000018 : 00022821;  % 42: 	move $a1, $v0 %
00000019 : 0c1000a6;  % 43: 	jal printTile %
0000001a : 0810001a;  % 46: 	j EXIT %
0000001b : 23bdffe0;  % 12:     addi $sp, $sp, -32 %
0000001c : afb00000;  % 13:     sw $s0, 0($sp) %
0000001d : afb10004;  % 14:     sw $s1, 4($sp) %
0000001e : afb20008;  % 15:     sw $s2, 8($sp) %
0000001f : afb3000c;  % 16:     sw $s3, 12($sp) %
00000020 : afb40010;  % 17:     sw $s4, 16($sp) %
00000021 : afb50014;  % 18:     sw $s5, 20($sp) %
00000022 : afb60018;  % 19:     sw $s6, 24($sp) %
00000023 : afb7001c;  % 20:     sw $s7, 28($sp) %
00000024 : 8cd10000;  % 22:     lw $s1, 0($a2)               # Carrega a largura da imagem %
00000025 : 8cd20004;  % 23:     lw $s2, 4($a2)               # Carrega a altura da imagem %
00000026 : 20c60008;  % 24:     addi $a2, $a2, 8 %
00000027 : 00068021;  % 25:     move $s0, $a2                # Endereco da imagem vai para $s0 %
00000028 : 02248820;  % 26:     add $s1, $s1, $a0            # A posicao x eh somada a largura %
00000029 : 02459020;  % 27:     add $s2, $s2, $a1            # A posicao y eh somada a altura %
0000002a : 00059821;  % 28:     move $s3, $a1                # i comeca na posicao y %
0000002b : 0004b821;  % 29:     move $s7, $a0                # Posicao x passa para $s7 %
0000002c : 1272002d;  % 31:     beq $s3, $s2, printImgHeightExit    # Se i for igual a Altura, termina %
0000002d : 24150001;  % 32:     li $s5, 1                           # Contador para os pixels %
0000002e : 8e160000;  % 33:     lw $s6, 0($s0)                      # Carrega o set de pixels atual %
0000002f : 0017a021;  % 34:     move $s4, $s7                       # j comeca na posicao x (que esta salva em $s7) %
00000030 : 12910026;  % 36:     beq $s4, $s1, printImgWidthExit      # Se j for igual a Largura, termina esse loop %
00000031 : 24080001;  % 38:     li $t0, 1 %
00000032 : 12a80006;  % 39:     beq $s5, $t0, printImgFirstPixel %
00000033 : 24080002;  % 40:     li $t0, 2 %
00000034 : 12a80007;  % 41:     beq $s5, $t0, printImgSecondPixel %
00000035 : 24080003;  % 42:     li $t0, 3 %
00000036 : 12a80009;  % 43:     beq $s5, $t0, printImgThirdPixel %
00000037 : 24080004;  % 44:     li $t0, 4 %
00000038 : 12a8000b;  % 45:     beq $s5, $t0, printImgFourthPixel %
00000039 : 00164602;  % 47:     srl $t0, $s6, 24 %
0000003a : 24090000;  % 48:     li $t1, 0                           # Flag para avisar que a word nao acabou %
0000003b : 08100048;  % 49:     j printImgWidthEnd %
0000003c : 00164200;  % 51:     sll $t0, $s6, 8 %
0000003d : 00084602;  % 52:     srl $t0, $t0, 24 %
0000003e : 24090000;  % 53:     li $t1, 0                           # Flag para avisar que a word nao acabou %
0000003f : 08100048;  % 54:     j printImgWidthEnd %
00000040 : 00164400;  % 56:     sll $t0, $s6, 16 %
00000041 : 00084602;  % 57:     srl $t0, $t0, 24 %
00000042 : 24090000;  % 58:     li $t1, 0                           # Flag para avisar que a word nao acabou %
00000043 : 08100048;  % 59:     j printImgWidthEnd %
00000044 : 00164600;  % 61:     sll $t0, $s6, 24 %
00000045 : 00084602;  % 62:     srl $t0, $t0, 24 %
00000046 : 24150000;  % 63:     li $s5, 0 %
00000047 : 24090001;  % 64:     li $t1, 1                           # Flag para avisar que a word acabou %
00000048 : 24190028;  % 66:     li $t9, 0x0028                      ### 0x0028: cor tida como invisivel. ### %
00000049 : 11190005;  % 67:     beq $t0, $t9, printImgWidthEnd_JumpPixel %
0000004a : 2402002d;  % 68:     li $v0, 45                          # Codigo do syscall plot %
0000004b : 00142021;  % 69:     move $a0, $s4                       # Posicao x do pixel %
0000004c : 00132821;  % 70:     move $a1, $s3                       # Posicao y do pixel %
0000004d : 00083021;  % 71:     move $a2, $t0                       # Cor para printar %
0000004e : 0000000c;  % 72:     syscall                             # Plota o pixel %
0000004f : 22b50001;  % 74:     addi $s5, $s5, 1                    # contador de pixel++ %
00000050 : 22940001;  % 75:     addi $s4, $s4, 1                    # j++ %
00000051 : 12910005;  % 76:     beq $s4, $s1, printImgWidthExit     # Se j for igual a Largura, termina esse loop %
00000052 : 15200001;  % 77:     bne $t1, $zero, printImgHeightExitOfWord %
00000053 : 08100030;  % 78:     j printImgWidthLoop %
00000054 : 22100004;  % 80:     addi $s0, $s0, 4 %
00000055 : 8e160000;  % 81:     lw $s6, 0($s0)                      # Carrega o set de pixels atual %
00000056 : 08100030;  % 82:     j printImgWidthLoop %
00000057 : 22730001;  % 84:     addi $s3, $s3, 1                    # i++ %
00000058 : 22100004;  % 85:     addi $s0, $s0, 4                    # Proxima word %
00000059 : 0810002c;  % 86:     j printImgHeightLoop %
0000005a : 8fb00000;  % 89:     lw $s0, 0($sp) %
0000005b : 8fb10004;  % 90:     lw $s1, 4($sp) %
0000005c : 8fb20008;  % 91:     lw $s2, 8($sp) %
0000005d : 8fb3000c;  % 92:     lw $s3, 12($sp) %
0000005e : 8fb40010;  % 93:     lw $s4, 16($sp) %
0000005f : 8fb50014;  % 94:     lw $s5, 20($sp) %
00000060 : 8fb60018;  % 95:     lw $s6, 24($sp) %
00000061 : 8fb7001c;  % 96:     lw $s7, 28($sp) %
00000062 : 23bd0020;  % 97:     addi $sp, $sp, 32 %
00000063 : 03e00008;  % 98:     jr $ra %
00000064 : 00054402;  % 22:     srl $t0, $a1, 16 #i %
00000065 : 00054c00;  % 23:     sll $t1, $a1, 16 #pre-j %
00000066 : 00094c02;  % 24:     srl $t1, $t1, 16 #j %
00000067 : 200a0010;  % 26:     addi $t2, $zero, 16  %
00000068 : 012a0018;  % 27:     mult $t1, $t2 %
00000069 : 00005012;  % 28:     mflo $t2 %
0000006a : 01485020;  % 29:     add $t2, $t2, $t0  %
0000006b : 00884020;  % 31:     add $t0, $a0, $t0  %
0000006c : 240bff00;  % 33:     li $t3, 0xFFFFFF00 %
0000006d : 8d0c0000;  % 34:     lw $t4, 0($t0) %
0000006e : 018b6824;  % 35:     and $t5, $t4, $t3 %
0000006f : 01a66825;  % 36:     or $t5, $t5, $a2 %
00000070 : ad0d0000;  % 37:     sw $t5, 0($t0) %
00000071 : 03e00008;  % 39:     jr $ra %
00000072 : 20080010;  % 49: 	addi $t0, $zero, 16  %
00000073 : 00c80018;  % 50: 	mult $a2, $t0 %
00000074 : 00004012;  % 51: 	mflo $t0 %
00000075 : 01054020;  % 52: 	add $t0, $t0, $a1  %
00000076 : 00884020;  % 54: 	add $t0, $a0, $t0  %
00000077 : 8d020000;  % 55: 	lw $v0, 0($t0) #carrega em $v0 o conteudo desejado %
00000078 : 00021600;  % 56: 	sll $v0, $v0, 24 #limpa os 24 bits da esquerda %
00000079 : 00021602;  % 57: 	srl $v0, $v0, 24 #devolve o byte para o canto da direita %
0000007a : 03e00008;  % 58: 	jr $ra %
0000007b : 24080014;  % 72:     li $t0, 20  %
0000007c : 24090011;  % 73:     li $t1, 17 %
0000007d : 00055402;  % 75:     srl $t2, $a1, 16 #x %
0000007e : 00055c00;  % 76:     sll $t3, $a1, 16 #pre-y %
0000007f : 000b5c02;  % 77:     srl $t3, $t3, 16 #y %
00000080 : 00086020;  % 79:     add $t4, $zero, $t0 %
00000081 : 0009c820;  % 80:     add $t9, $zero, $t1 %
00000082 : 00006820;  % 81:     add $t5, $zero, $zero #i %
00000083 : 00007820;  % 82:     add $t7, $zero, $zero #j %
00000084 : 240e0001;  % 83:     li $t6, 1 %
00000085 : 014cc02a;  % 86:         slt $t8, $t2, $t4 #pixel < tile ? %
00000086 : 130e0003;  % 87:         beq $t8, $t6, procuraY # t8 == 1, entao tileX ok %
00000087 : 21ad0001;  % 88:         addi $t5, $t5, 1 %
00000088 : 01886020;  % 89:         add $t4, $t4, $t0 %
00000089 : 08100085;  % 90:         j procuraX %
0000008a : 0179c02a;  % 93:         slt $t8, $t3, $t9 #pixel < tile ? %
0000008b : 130e0003;  % 94:         beq $t8, $t6, setIJ # t8 == 1, entao tileX ok %
0000008c : 21ef0001;  % 95:         addi $t7, $t7, 1 %
0000008d : 0329c820;  % 96:         add $t9, $t9, $t1 %
0000008e : 0810008a;  % 97:         j procuraY %
0000008f : 00001020;  % 100:         add $v0, $zero, $zero %
00000090 : 000d1020;  % 101:         add $v0, $zero, $t5 %
00000091 : 00021400;  % 102:         sll $v0, $v0, 16 %
00000092 : 004f1020;  % 103:         add $v0, $v0, $t7 %
00000093 : 03e00008;  % 105:     jr $ra %
00000094 : 24080014;  % 117:     li $t0, 20  %
00000095 : 24090011;  % 118:     li $t1, 17 %
00000096 : 00055402;  % 120:     srl $t2, $a1, 16 #i %
00000097 : 00055c00;  % 121:     sll $t3, $a1, 16 #pre-j %
00000098 : 000b5c02;  % 122:     srl $t3, $t3, 16 #j %
00000099 : 01480018;  % 124:     mult $t2, $t0 %
0000009a : 00005012;  % 125:     mflo $t2 #pixel x %
0000009b : 01690018;  % 127:     mult $t3, $t1 %
0000009c : 00005812;  % 128:     mflo $t3 #pixel y %
0000009d : 00043020;  % 130:     add $a2, $zero, $a0 #endereco da imagem %
0000009e : 000a2020;  % 131:     add $a0, $zero, $t2 #posicao x %
0000009f : 000b2820;  % 132:     add $a1, $zero, $t3 #posicao y %
000000a0 : 23bdfffc;  % 134:     addi $sp, $sp, -4 %
000000a1 : afbf0000;  % 135:     sw $ra, 0($sp) %
000000a2 : 0c10001b;  % 137:     jal printImg %
000000a3 : 8fbf0000;  % 139:     lw $ra, 0($sp) %
000000a4 : 23bd0004;  % 140:     addi $sp, $sp, 4 %
000000a5 : 03e00008;  % 142:     jr $ra %
000000a6 : 24080014;  % 155:     li $t0, 20 #largura tile %
000000a7 : 24090011;  % 156:     li $t1, 17 #altura tile %
000000a8 : 00055402;  % 158:     srl $t2, $a1, 16 #i %
000000a9 : 00055c00;  % 159:     sll $t3, $a1, 16 #pré-j %
000000aa : 000b5c02;  % 160:     srl $t3, $t3, 16 #j %
000000ab : 01480018;  % 162:     mult $t2, $t0 %
000000ac : 00005012;  % 163:     mflo $t2 #pixel x %
000000ad : 01690018;  % 165:     mult $t3, $t1 %
000000ae : 00005812;  % 166:     mflo $t3 #pixel y %
000000af : 01402820;  % 168:     add $a1, $t2, $zero %
000000b0 : 00052c00;  % 169:     sll $a1, $a1, 16 #x %
000000b1 : 00ab2820;  % 170:     add $a1, $a1, $t3 #y %
000000b2 : 23bdfffc;  % 172:     addi $sp, $sp, -4 %
000000b3 : afbf0000;  % 173:     sw $ra, 0($sp) %
000000b4 : 0c1000b8;  % 175:     jal printTilePixel %
000000b5 : 8fbf0000;  % 177:     lw $ra, 0($sp) %
000000b6 : 23bd0004;  % 178:     addi $sp, $sp, 4 %
000000b7 : 03e00008;  % 180:     jr $ra %
000000b8 : 23bdfffc;  % 189:     addi $sp, $sp, -4 %
000000b9 : afbf0000;  % 190:     sw $ra, 0($sp) %
000000ba : 23bdffe0;  % 192:     addi $sp, $sp, -32 %
000000bb : afb00000;  % 193:     sw $s0, 0($sp) %
000000bc : afb10004;  % 194:     sw $s1, 4($sp) %
000000bd : afb20008;  % 195:     sw $s2, 8($sp) %
000000be : afb3000c;  % 196:     sw $s3, 12($sp) %
000000bf : afb40010;  % 197:     sw $s4, 16($sp) %
000000c0 : afb50014;  % 198:     sw $s5, 20($sp) %
000000c1 : afb60018;  % 199:     sw $s6, 24($sp) %
000000c2 : afb7001c;  % 200:     sw $s7, 28($sp) %
000000c3 : 00058402;  % 206:     srl $s0, $a1, 16 #x %
000000c4 : 00058c00;  % 207:     sll $s1, $a1, 16 #pré-y %
000000c5 : 00118c02;  % 208:     srl $s1, $s1, 16 #y %
000000c6 : 20840008;  % 210:     addi $a0, $a0, 8 #pula word de largura e altura da imagem %
000000c7 : 00902020;  % 211:     add $a0, $a0, $s0 #posiciona em x %
000000c8 : 24080140;  % 213:     li $t0, 320 %
000000c9 : 01110018;  % 214:     mult $t0, $s1 #multiplicando pixel y por quantidade de pixel em x que tenho que pular %
000000ca : 00004012;  % 215:     mflo $t0 %
000000cb : 00882020;  % 216:     add $a0, $a0, $t0 %
000000cc : 00046020;  % 218:     add $t4, $zero, $a0 #coloca em t4 o endereço de onde estão os pixels da imagem %
000000cd : 24120014;  % 221:     li $s2, 20 #largura tile + 1 (20 na verdade) %
000000ce : 24130011;  % 222:     li $s3, 17 #altura tile + 1 (17 na verdade) %
000000cf : 0000b020;  % 224:     add $s6, $zero, $zero #contador de posicao y %
000000d0 : 24140019;  % 225:     li $s4, 25 #numero 24 %
000000d1 : 8d970000;  % 228:         lw $s7, 0($t4) %
000000d2 : 3c01ff00;  % 229:         addi $t1, $zero, 0xFF000000 #mascara %
000000d3 : 34210000;  % 229:  %
000000d4 : 00014820;  % 229:  %
000000d5 : 240a0018;  % 230:         li $t2, 24  #contador de shift %
000000d6 : 0000a820;  % 231:         add $s5, $zero, $zero #contador de posicao x %
000000d7 : 12b2002d;  % 234:             beq $s5, $s2, pulaEixoY %
000000d8 : 2402002d;  % 236:             li $v0, 45                          # Codigo do syscall plot %
000000d9 : 02154020;  % 238:             add $t0, $s0, $s5                   # posicao x do pixel + contador de pixel x %
000000da : 00082021;  % 239:             move $a0, $t0                       # Posicao x do pixel %
000000db : 02364020;  % 241:             add $t0, $s1, $s6                   # posicao y do pixel + contador de pixel y %
000000dc : 00082821;  % 242:             move $a1, $t0                       # Posicao y do pixel %
000000dd : 02e9c024;  % 244:             and $t8, $s7, $t1                   # pega pixel da imagem %
000000de : 0158c006;  % 245:             srlv $t8, $t8, $t2                  # shifta para pixel ocupar posicao menos significativa %
000000df : 00183021;  % 246:             move $a2, $t8                       # Cor para printar %
000000e0 : 23bdffd8;  % 248:             addi $sp, $sp, -40 %
000000e1 : afa80000;  % 249:             sw $t0, 0($sp) %
000000e2 : afa90004;  % 250:             sw $t1, 4($sp) %
000000e3 : afaa0008;  % 251:             sw $t2, 8($sp) %
000000e4 : afab000c;  % 252:             sw $t3, 12($sp) %
000000e5 : afac0010;  % 253:             sw $t4, 16($sp) %
000000e6 : afad0014;  % 254:             sw $t5, 20($sp) %
000000e7 : afae0018;  % 255:             sw $t6, 24($sp) %
000000e8 : afaf001c;  % 256:             sw $t7, 28($sp) %
000000e9 : afb80020;  % 257:             sw $t8, 32($sp) %
000000ea : afb90024;  % 258:             sw $t9, 36($sp) %
000000eb : 0000000c;  % 260:             syscall                             # Plota o pixel %
000000ec : 8fa80000;  % 262:             lw $t0, 0($sp) %
000000ed : 8fa90004;  % 263:             lw $t1, 4($sp) %
000000ee : 8faa0008;  % 264:             lw $t2, 8($sp) %
000000ef : 8fab000c;  % 265:             lw $t3, 12($sp) %
000000f0 : 8fac0010;  % 266:             lw $t4, 16($sp) %
000000f1 : 8fad0014;  % 267:             lw $t5, 20($sp) %
000000f2 : 8fae0018;  % 268:             lw $t6, 24($sp) %
000000f3 : 8faf001c;  % 269:             lw $t7, 28($sp) %
000000f4 : 8fb80020;  % 270:             lw $t8, 32($sp) %
000000f5 : 8fb90024;  % 271:             lw $t9, 36($sp) %
000000f6 : 23bd0028;  % 272:             addi $sp, $sp, 40 %
000000f7 : 214afff8;  % 274:             addi $t2, $t2, -8 %
000000f8 : 00094a02;  % 275:             srl $t1, $t1, 8 %
000000f9 : 22b50001;  % 277:             addi $s5, $s5, 1 %
000000fa : 240bffff;  % 279:             li $t3, -1 %
000000fb : 016a582a;  % 280:             slt $t3, $t3, $t2 %
000000fc : 11600001;  % 281:             beq $t3, $zero, proximaWord %
000000fd : 081000d7;  % 283:             j eixoX %
000000fe : 218c0004;  % 287:                 addi $t4, $t4, 4 %
000000ff : 8d970000;  % 288:                 lw $s7, 0($t4) %
00000100 : 3c01ff00;  % 289:                 addi $t1, $zero, 0xFF000000 #mascara %
00000101 : 34210000;  % 289:  %
00000102 : 00014820;  % 289:  %
00000103 : 240a0018;  % 290:                 li $t2, 24  #contador de shift %
00000104 : 081000d7;  % 291:                 j eixoX %
00000105 : 22d60001;  % 295:             addi $s6, $s6, 1 %
00000106 : 218c012c;  % 296:             addi $t4, $t4, 300          #Andando mais 300 pixels porque andou 20 de x  %
00000107 : 1676ffc9;  % 297:             bne $s3, $s6, printTileLoop %
00000108 : 8fb00000;  % 302:         lw $s0, 0($sp) %
00000109 : 8fb10004;  % 303:         lw $s1, 4($sp) %
0000010a : 8fb20008;  % 304:         lw $s2, 8($sp) %
0000010b : 8fb3000c;  % 305:         lw $s3, 12($sp) %
0000010c : 8fb40010;  % 306:         lw $s4, 16($sp) %
0000010d : 8fb50014;  % 307:         lw $s5, 20($sp) %
0000010e : 8fb60018;  % 308:         lw $s6, 24($sp) %
0000010f : 8fb7001c;  % 309:         lw $s7, 28($sp) %
00000110 : 23bd0020;  % 310:         addi $sp, $sp, 32 %
00000111 : 8fbf0000;  % 312:         lw $ra, 0($sp) %
00000112 : 23bd0004;  % 313:         addi $sp, $sp, 4 %
00000113 : 03e00008;  % 315:         jr $ra %
00000114 : 00004021;  % 16: 	move $t0, $zero %
00000115 : 00004821;  % 17: 	move $t1, $zero %
00000116 : 00005021;  % 18: 	move $t2, $zero %
00000117 : 00005821;  % 19: 	move $t3, $zero %
00000118 : 00006021;  % 20: 	move $t4, $zero %
00000119 : 00006821;  % 21: 	move $t5, $zero %
0000011a : 00007021;  % 22: 	move $t6, $zero %
0000011b : 00007821;  % 23: 	move $t7, $zero %
0000011c : 0000c021;  % 24: 	move $t8, $zero %
0000011d : 0000c821;  % 25: 	move $t9, $zero %
0000011e : 3c01ffff;  % 27: 	la $t0, 0xFFFF0120 %
0000011f : 34280120;  % 27:  %
00000120 : 00005821;  % 28: 	move $t3, $zero	 %
00000121 : 240e0003;  % 29: 	li $t6, 3 %
00000122 : 20180008;  % 30: 	addi $t8, $zero, 8 	# número 8 %
00000123 : 240c0004;  % 31: 	li $t4, 4	#contador de 4 bytes %
00000124 : 8d090008;  % 37: 			lw $t1, 8($t0) 	#0xFFFF0128 %
00000125 : 00094882;  % 38: 			srl $t1, $t1, 2 %
00000126 : 1120fffd;  % 40: 			beq $t1, $zero, CHECK_READY1_CONTADOR %
00000127 : 8d0a0000;  % 42: 		lw $t2, 0($t0)	 %
00000128 : 01d80018;  % 43: 		mult $t6, $t8 %
00000129 : 00006812;  % 44: 		mflo $t5 	#quantos shifts serão necessários para colocar este byte na posição certa %
0000012a : 01aa5004;  % 45: 		sllv $t2, $t2, $t5 %
0000012b : 016a5825;  % 46: 		or $t3, $t3, $t2 #coloca no t3 o resultado da soma com shift %
0000012c : 218cffff;  % 47: 		addi $t4, $t4, -1 %
0000012d : 21ceffff;  % 48: 		addi $t6, $t6, -1 %
0000012e : 8d090008;  % 51: 			lw $t1, 8($t0) 	#0xFFFF0128 %
0000012f : 00094882;  % 52: 			srl $t1, $t1, 2 %
00000130 : 1520fffd;  % 54: 			bne $t1, $zero, CHECK_READY0_CONTADOR %
00000131 : 1580fff2;  % 57: 		bne $t4, $zero, CONTADOR_BYTES_ARQ %
00000132 : 000b1021;  % 62: 	move $v0, $t3 %
00000133 : 240c0004;  % 63: 	li $t4, 4	#contador de uma word %
00000134 : 240e0003;  % 64: 	li $t6, 3 %
00000135 : 20180008;  % 65: 	addi $t8, $zero, 8 	# número 8 %
00000136 : 11600015;  % 68: 		beq $t3, $zero, FIM_UART_READ %
00000137 : 8d090008;  % 70: 			lw $t1, 8($t0) 	#0xFFFF0128 %
00000138 : 00094882;  % 71: 			srl $t1, $t1, 2 %
00000139 : 1120fffd;  % 72: 			beq $t1, $zero, CHECK_READY1 %
0000013a : 8d0a0000;  % 74: 		lw $t2, 0($t0)	 %
0000013b : 01d80018;  % 75: 		mult $t6, $t8 %
0000013c : 00006812;  % 76: 		mflo $t5 	#quantos shifts serão necessários para colocar este byte na posição certa %
0000013d : 01aa5004;  % 77: 		sllv $t2, $t2, $t5 %
0000013e : 01ea7825;  % 78: 		or $t7, $t7, $t2 #coloca no t3 o resultado da soma com shift %
0000013f : 218cffff;  % 80: 		addi $t4, $t4, -1 %
00000140 : 21ceffff;  % 81: 		addi $t6, $t6, -1 %
00000141 : 216bffff;  % 83: 		addi $t3, $t3, -1 %
00000142 : 8d090008;  % 86: 			lw $t1, 8($t0) 	#0xFFFF0128 %
00000143 : 00094882;  % 87: 			srl $t1, $t1, 2 %
00000144 : 1520fffd;  % 88: 			bne $t1, $zero, CHECK_READY0 %
00000145 : 1580fff0;  % 90: 		bne $t4, $zero, BYTES_ARQ %
00000146 : 240c0004;  % 92: 		li $t4, 4 %
00000147 : ac8f0000;  % 93: 		sw $t7, 0($a0) %
00000148 : 20840004;  % 94: 		addi $a0, $a0, 4		 %
00000149 : 00007821;  % 95: 		move $t7, $zero %
0000014a : 240e0003;  % 96: 		li $t6, 3 %
0000014b : 08100136;  % 98: 		j BYTES_ARQ %
0000014c : 11e00001;  % 101: 		beq $t7, $zero, FIM_UART_READ_JUMP %
0000014d : ac8f0000;  % 102: 		sw $t7, 0($a0) %
0000014e : 03e00008;  % 104: 		jr $ra %
0000014f : 23bdfff8;  % 15:     addi $sp, $sp, -8 %
00000150 : afbf0000;  % 16:     sw $ra, 0($sp) %
00000151 : afa40004;  % 17:     sw $a0, 4($sp) %
00000152 : 3c01ffff;  % 19:     la $t0, 0xFFFF0104 # Endereco do buffer 1 do teclado %
00000153 : 34280104;  % 19:  %
00000154 : 8d040000;  % 20:     lw $a0, 0($t0) %
00000155 : 3c01ffff;  % 21:     la $t0, 0xFFFF0100 # Endereco do buffer 0 do teclado %
00000156 : 34280100;  % 21:  %
00000157 : 8d050000;  % 22:     lw $a1, 0($t0) %
00000158 : 0c10015d;  % 23:     jal inputManagerProcessBuffer %
00000159 : 8fbf0000;  % 25:     lw $ra, 0($sp) %
0000015a : 8fa40004;  % 26:     lw $a0, 4($sp) %
0000015b : 23bd0008;  % 27:     addi $sp, $sp, 8 %
0000015c : 03e00008;  % 28:     jr $ra %
0000015d : 23bdffe8;  % 32:     addi $sp, $sp, -24 %
0000015e : afbf0000;  % 33:     sw $ra, 0($sp) %
0000015f : afb00004;  % 34:     sw $s0, 4($sp) %
00000160 : afb10008;  % 35:     sw $s1, 8($sp) %
00000161 : afb2000c;  % 36:     sw $s2, 12($sp) %
00000162 : afa40010;  % 37:     sw $a0, 16($sp) %
00000163 : afa50014;  % 38:     sw $a1, 20($sp) %
00000164 : 00048021;  % 40:     move $s0, $a0           # Buffer 1 para $s0 %
00000165 : 00058821;  % 41:     move $s1, $a1           # Buffer 0 para $s1 %
00000166 : 241200f0;  % 42:     li $s2, 0x00F0          # $s2 contem o codigo para remocao de botao %
00000167 : 00104602;  % 44:     srl $t0, $s0, 24        # Byte mais significativo do buffer 1 vai pra $t0 %
00000168 : 15120005;  % 45:     bne $t0, $s2, inputManagerProcessBuffer_ignoreFirstByte # Se $t0 nao for 0x00F0, ignora esse byte %
00000169 : 24050000;  % 46:     li $a1, 0               # Se $t0 for 0x00F0, seta o proximo byte para false, se for um botao %
0000016a : 00102200;  % 47:     sll $a0, $s0, 8 %
0000016b : 00042602;  % 48:     srl $a0, $a0, 24 %
0000016c : 0c1001ba;  % 50:     jal inputManagerSetButton   # Seta o segundo byte pra false %
0000016d : 08100179;  % 51:     j inputManagerProcessBuffer_thirdByte # Vai para o terceiro byte %
0000016e : 00102200;  % 53:     sll $a0, $s0, 8 %
0000016f : 00042602;  % 54:     srl $a0, $a0, 24 %
00000170 : 10920003;  % 55:     beq $a0, $s2, inputManagerProcessBuffer_thirdByteToFalse # Se for 0x00F0, seta o proximo byte para false %
00000171 : 24050001;  % 56:     li $a1, 1 %
00000172 : 0c1001ba;  % 57:     jal inputManagerSetButton     # Seta o segundo byte pra true %
00000173 : 08100179;  % 58:     j inputManagerProcessBuffer_thirdByte # Vai para o terceiro byte %
00000174 : 00102400;  % 60:     sll $a0, $s0, 16 %
00000175 : 00042602;  % 61:     srl $a0, $a0, 24 %
00000176 : 24050000;  % 62:     li $a1, 0 %
00000177 : 0c1001ba;  % 63:     jal inputManagerSetButton    # Seta o terceiro byte pra false %
00000178 : 08100184;  % 64:     j inputManagerProcessBuffer_fourthByte # vai pro quarto byte %
00000179 : 00102400;  % 66:     sll $a0, $s0, 16 %
0000017a : 00042602;  % 67:     srl $a0, $a0, 24 %
0000017b : 10920003;  % 68:     beq $a0, $s2, inputManagerProcessBuffer_fourthByteToFalse %
0000017c : 24050001;  % 69:     li $a1, 1 %
0000017d : 0c1001ba;  % 70:     jal inputManagerSetButton    # Seta o terceiro byte pra true %
0000017e : 08100184;  % 71:     j inputManagerProcessBuffer_fourthByte # vai pro quarto byte %
0000017f : 00102600;  % 73:     sll $a0, $s0, 24 %
00000180 : 00042602;  % 74:     srl $a0, $a0, 24 %
00000181 : 24050000;  % 75:     li $a1, 0 %
00000182 : 0c1001ba;  % 76:     jal inputManagerSetButton   # Seta o quarto byte pra false %
00000183 : 0810018e;  % 77:     j inputManagerProcessBuffer_fifthByte # Vai pro quinto byte %
00000184 : 00102600;  % 79:     sll $a0, $s0, 24 %
00000185 : 00042602;  % 80:     srl $a0, $a0, 24 %
00000186 : 10920003;  % 81:     beq $a0, $s2, inputManagerProcessBuffer_fifthByteToFalse %
00000187 : 24050001;  % 82:     li $a1, 1 %
00000188 : 0c1001ba;  % 83:     jal inputManagerSetButton    # Seta o quarto byte pra true %
00000189 : 0810018e;  % 84:     j inputManagerProcessBuffer_fifthByte # Vai pro quinto byte %
0000018a : 00112602;  % 86:     srl $a0, $s1, 24 %
0000018b : 24050000;  % 87:     li $a1, 0 %
0000018c : 0c1001ba;  % 88:     jal inputManagerSetButton   # Seta o quinto byte pra false %
0000018d : 08100198;  % 89:     j inputManagerProcessBuffer_sixthByte # Vai pro sexto byte %
0000018e : 00112602;  % 91:     srl $a0, $s1, 24 %
0000018f : 10920003;  % 92:     beq $a0, $s2, inputManagerProcessBuffer_sixthByteToFalse %
00000190 : 24050001;  % 93:     li $a1, 1 %
00000191 : 0c1001ba;  % 94:     jal inputManagerSetButton #seta o quinto byte pra true %
00000192 : 08100198;  % 95:     j inputManagerProcessBuffer_sixthByte # Vai pro sexto byte %
00000193 : 00112200;  % 97:     sll $a0, $s1, 8 %
00000194 : 00042602;  % 98:     srl $a0, $a0, 24 %
00000195 : 24050000;  % 99:     li $a1, 0 %
00000196 : 0c1001ba;  % 100:     jal inputManagerSetButton   # Seta o sexto byte pra false %
00000197 : 081001a3;  % 101:     j inputManagerProcessBuffer_seventhByte # Vai pro setimo byte %
00000198 : 00112200;  % 103:     sll $a0, $s1, 8 %
00000199 : 00042602;  % 104:     srl $a0, $a0, 24 %
0000019a : 10920003;  % 105:     beq $a0, $s2, inputManagerProcessBuffer_seventhByteToFalse %
0000019b : 24050001;  % 106:     li $a1, 1 %
0000019c : 0c1001ba;  % 107:     jal inputManagerSetButton #seta o sexto byte pra true %
0000019d : 081001a3;  % 108:     j inputManagerProcessBuffer_seventhByte # Vai pro setimo byte %
0000019e : 00112400;  % 110:     sll $a0, $s1, 16 %
0000019f : 00042602;  % 111:     srl $a0, $a0, 24 %
000001a0 : 24050000;  % 112:     li $a1, 0 %
000001a1 : 0c1001ba;  % 113:     jal inputManagerSetButton   # Seta o setimo byte pra false %
000001a2 : 081001ae;  % 114:     j inputManagerProcessBuffer_eighthByte # Vai pro oitavo byte %
000001a3 : 00112400;  % 116:     sll $a0, $s1, 16 %
000001a4 : 00042602;  % 117:     srl $a0, $a0, 24 %
000001a5 : 10920003;  % 118:     beq $a0, $s2, inputManagerProcessBuffer_eighthByteToFalse %
000001a6 : 24050001;  % 119:     li $a1, 1 %
000001a7 : 0c1001ba;  % 120:     jal inputManagerSetButton #seta o setimo byte pra true %
000001a8 : 081001ae;  % 121:     j inputManagerProcessBuffer_eighthByte # Vai pro oitavo byte %
000001a9 : 00112600;  % 123:     sll $a0, $s1, 24 %
000001aa : 00042602;  % 124:     srl $a0, $a0, 24 %
000001ab : 24050000;  % 125:     li $a1, 0 %
000001ac : 0c1001ba;  % 126:     jal inputManagerSetButton   # Seta o oitavo byte pra false %
000001ad : 081001b2;  % 127:     j inputManagerProcessBuffer_end # termina %
000001ae : 00112600;  % 129:     sll $a0, $s1, 24 %
000001af : 00042602;  % 130:     srl $a0, $a0, 24 %
000001b0 : 24050001;  % 131:     li $a1, 1 %
000001b1 : 0c1001ba;  % 132:     jal inputManagerSetButton #seta o oitavo byte pra true %
000001b2 : 8fbf0000;  % 134:     lw $ra, 0($sp) %
000001b3 : 8fb00004;  % 135:     lw $s0, 4($sp) %
000001b4 : 8fb10008;  % 136:     lw $s1, 8($sp) %
000001b5 : 8fb2000c;  % 137:     lw $s2, 12($sp) %
000001b6 : 8fa40010;  % 138:     lw $a0, 16($sp) %
000001b7 : 8fa50014;  % 139:     lw $a1, 20($sp) %
000001b8 : 23bd0018;  % 140:     addi $sp, $sp, 24 %
000001b9 : 03e00008;  % 141:     jr $ra %
000001ba : 3c011001;  % 146:     lw $t1, inputManagerFlags %
000001bb : 8c29000c;  % 146:  %
000001bc : 24080022;  % 147:     li $t0, 0x00000022 ### Botao A %
000001bd : 15040002;  % 148:     bne $t0, $a0, inputManagerSetButton_B %
000001be : 24080001;  % 149:     li $t0, 0x0001 %
000001bf : 081001ec;  % 150:     j inputManagerSetButtonFoundButton %
000001c0 : 2408001a;  % 152:     li $t0, 0x0000001A ### Botao B %
000001c1 : 15040002;  % 153:     bne $t0, $a0, inputManagerSetButton_X %
000001c2 : 24080002;  % 154:     li $t0, 0x0002 %
000001c3 : 081001ec;  % 155:     j inputManagerSetButtonFoundButton %
000001c4 : 2408001b;  % 157:     li $t0, 0x0000001B ### Botao X %
000001c5 : 15040002;  % 158:     bne $t0, $a0, inputManagerSetButton_Y %
000001c6 : 24080004;  % 159:     li $t0, 0x0004 %
000001c7 : 081001ec;  % 160:     j inputManagerSetButtonFoundButton %
000001c8 : 2408001c;  % 162:     li $t0, 0x0000001C ### Botao Y %
000001c9 : 15040002;  % 163:     bne $t0, $a0, inputManagerSetButton_Start %
000001ca : 24080008;  % 164:     li $t0, 0x0008 %
000001cb : 081001ec;  % 165:     j inputManagerSetButtonFoundButton %
000001cc : 2408005a;  % 167:     li $t0, 0x0000005A ### Botao Start %
000001cd : 15040002;  % 168:     bne $t0, $a0, inputManagerSetButton_Select %
000001ce : 24080010;  % 169:     li $t0, 0x0010 %
000001cf : 081001ec;  % 170:     j inputManagerSetButtonFoundButton %
000001d0 : 24080059;  % 172:     li $t0, 0x00000059 ### Botao Select %
000001d1 : 15040002;  % 173:     bne $t0, $a0, inputManagerSetButton_Right %
000001d2 : 24080020;  % 174:     li $t0, 0x0020 %
000001d3 : 081001ec;  % 175:     j inputManagerSetButtonFoundButton %
000001d4 : 2408004b;  % 177:     li $t0, 0x0000004B ### Botao Right %
000001d5 : 15040002;  % 178:     bne $t0, $a0, inputManagerSetButton_Up %
000001d6 : 24080040;  % 179:     li $t0, 0x0040 %
000001d7 : 081001ec;  % 180:     j inputManagerSetButtonFoundButton %
000001d8 : 24080043;  % 182:     li $t0, 0x00000043 ### Botao Up %
000001d9 : 15040002;  % 183:     bne $t0, $a0, inputManagerSetButton_Left %
000001da : 24080080;  % 184:     li $t0, 0x0080 %
000001db : 081001ec;  % 185:     j inputManagerSetButtonFoundButton %
000001dc : 2408003b;  % 187:     li $t0, 0x0000003B ### Botao Left %
000001dd : 15040002;  % 188:     bne $t0, $a0, inputManagerSetButton_Down %
000001de : 24080100;  % 189:     li $t0, 0x0100 %
000001df : 081001ec;  % 190:     j inputManagerSetButtonFoundButton %
000001e0 : 24080042;  % 192:     li $t0, 0x00000042 ### Botao Down %
000001e1 : 15040002;  % 193:     bne $t0, $a0, inputManagerSetButton_R %
000001e2 : 24080200;  % 194:     li $t0, 0x0200 %
000001e3 : 081001ec;  % 195:     j inputManagerSetButtonFoundButton %
000001e4 : 24080021;  % 197:     li $t0, 0x00000021 ### Botao R %
000001e5 : 15040002;  % 198:     bne $t0, $a0, inputManagerSetButton_L %
000001e6 : 24080400;  % 199:     li $t0, 0x0400 %
000001e7 : 081001ec;  % 200:     j inputManagerSetButtonFoundButton %
000001e8 : 240a0023;  % 202:     li $t2, 0x00000023 ### Botao L %
000001e9 : 24080800;  % 203:     li $t0, 0x0800 %
000001ea : 11440001;  % 204:     beq $t2, $a0, inputManagerSetButtonFoundButton %
000001eb : 03e00008;  % 205:     jr $ra %
000001ec : 10a00004;  % 207:     beq $a1, $zero, inputManagerSetButtonSetToFalse %
000001ed : 01094825;  % 208:     or $t1, $t0, $t1 %
000001ee : 3c011001;  % 209:     sw $t1, inputManagerFlags %
000001ef : ac29000c;  % 209:  %
000001f0 : 03e00008;  % 210:     jr $ra %
000001f1 : 01004027;  % 212:     not $t0, $t0 %
000001f2 : 01094824;  % 213:     and $t1, $t0, $t1 %
000001f3 : 3c011001;  % 214:     sw $t1, inputManagerFlags %
000001f4 : ac29000c;  % 214:  %
000001f5 : 03e00008;  % 215:     jr $ra %
000001f6 : 3c011001;  % 220:     lw $v0, inputManagerFlags %
000001f7 : 8c22000c;  % 220:  %
000001f8 : 30420001;  % 221:     andi $v0, $v0, 0x0001 %
000001f9 : 03e00008;  % 222:     jr $ra %
000001fa : 3c011001;  % 225:     lw $v0, inputManagerFlags %
000001fb : 8c22000c;  % 225:  %
000001fc : 30420002;  % 226:     andi $v0, $v0, 0x0002 %
000001fd : 00021042;  % 227:     srl $v0, $v0, 1 %
000001fe : 03e00008;  % 228:     jr $ra %
000001ff : 3c011001;  % 231:     lw $v0, inputManagerFlags %
00000200 : 8c22000c;  % 231:  %
00000201 : 30420004;  % 232:     andi $v0, $v0, 0x0004 %
00000202 : 00021082;  % 233:     srl $v0, $v0, 2 %
00000203 : 03e00008;  % 234:     jr $ra %
00000204 : 3c011001;  % 237:     lw $v0, inputManagerFlags %
00000205 : 8c22000c;  % 237:  %
00000206 : 30420008;  % 238:     andi $v0, $v0, 0x0008 %
00000207 : 000210c2;  % 239:     srl $v0, $v0, 3 %
00000208 : 03e00008;  % 240:     jr $ra %
00000209 : 3c011001;  % 243:     lw $v0, inputManagerFlags %
0000020a : 8c22000c;  % 243:  %
0000020b : 30420010;  % 244:     andi $v0, $v0, 0x0010 %
0000020c : 00021102;  % 245:     srl $v0, $v0, 4 %
0000020d : 03e00008;  % 246:     jr $ra %
0000020e : 3c011001;  % 249:     lw $v0, inputManagerFlags %
0000020f : 8c22000c;  % 249:  %
00000210 : 30420020;  % 250:     andi $v0, $v0, 0x0020 %
00000211 : 00021142;  % 251:     srl $v0, $v0, 5 %
00000212 : 03e00008;  % 252:     jr $ra %
00000213 : 3c011001;  % 255:     lw $v0, inputManagerFlags %
00000214 : 8c22000c;  % 255:  %
00000215 : 30420040;  % 256:     andi $v0, $v0, 0x0040 %
00000216 : 00021182;  % 257:     srl $v0, $v0, 6 %
00000217 : 03e00008;  % 258:     jr $ra %
00000218 : 3c011001;  % 261:     lw $v0, inputManagerFlags %
00000219 : 8c22000c;  % 261:  %
0000021a : 30420080;  % 262:     andi $v0, $v0, 0x0080 %
0000021b : 000211c2;  % 263:     srl $v0, $v0, 7 %
0000021c : 03e00008;  % 264:     jr $ra %
0000021d : 3c011001;  % 267:     lw $v0, inputManagerFlags %
0000021e : 8c22000c;  % 267:  %
0000021f : 30420100;  % 268:     andi $v0, $v0, 0x0100 %
00000220 : 00021202;  % 269:     srl $v0, $v0, 8 %
00000221 : 03e00008;  % 270:     jr $ra %
00000222 : 3c011001;  % 273:     lw $v0, inputManagerFlags %
00000223 : 8c22000c;  % 273:  %
00000224 : 30420200;  % 274:     andi $v0, $v0, 0x0200 %
00000225 : 00021242;  % 275:     srl $v0, $v0, 9 %
00000226 : 03e00008;  % 276:     jr $ra %
00000227 : 3c011001;  % 279:     lw $v0, inputManagerFlags %
00000228 : 8c22000c;  % 279:  %
00000229 : 30420400;  % 280:     andi $v0, $v0, 0x0400 %
0000022a : 00021282;  % 281:     srl $v0, $v0, 10 %
0000022b : 03e00008;  % 282:     jr $ra %
0000022c : 3c011001;  % 285:     lw $v0, inputManagerFlags %
0000022d : 8c22000c;  % 285:  %
0000022e : 30420800;  % 286:     andi $v0, $v0, 0x0800 %
0000022f : 000212c2;  % 287:     srl $v0, $v0, 11 %
00000230 : 03e00008;  % 288:     jr $ra %

END;
